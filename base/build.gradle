/*
 * Copyright (c) 2021 LCLP.
 *
 * Licensed under the MIT License. For more information, consider the LICENSE file in the project's root directory.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

def getVersion(boolean strict = false) {
    def tag = "${rootProject.ext.getTag()}"
    if (tag.matches('^base-[0-9]+\\.[0-9]+\\.[0-9]+$')) return tag.split("-")[1]
    else {
        if(strict) throw new IllegalStateException("Tag '${tag}' does not meet the required versioning scheme.")
        else return "dev"
    }
}

def privateProps = rootProject.ext.PRIVATE as Properties

group 'work.lclpnet.mcserver-api'
archivesBaseName = 'mcserver-api-base'
version getVersion()

repositories {
    mavenCentral()
    maven { url = 'https://repo.lclpnet.work/repository/internal' }
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'work.lclpnet:lclpnetwork-api:1.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.publish.dependsOn({
    def versionTest = getVersion(true)
    println("Publishing version '${versionTest}'...")
})

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mcserver-api-base'
            from components.java

            pom {
                name = 'MCServerAPI Base'
                description = 'A Java library to manage Minecraft server backend interaction with LCLPNetwork.'
            }
        }
    }
    repositories {
        maven {
            if (privateProps.containsKey('mavenPassword')
                    && privateProps.containsKey('mavenHost')
                    && privateProps.containsKey('mavenUser')) {
                credentials {
                    username privateProps.getProperty('mavenUser');
                    password privateProps.getProperty('mavenPassword');
                }
                url privateProps.getProperty('mavenHost');
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}